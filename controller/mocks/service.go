// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/AlehBelski/go-card-api/model"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields:
func (_m *Service) Create() (model.Cart, error) {
	ret := _m.Called()

	var r0 model.Cart
	if rf, ok := ret.Get(0).(func() model.Cart); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.Cart)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: cartID, itemID
func (_m *Service) DeleteItem(cartID int, itemID int) error {
	ret := _m.Called(cartID, itemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(cartID, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ID
func (_m *Service) Read(ID int) (model.Cart, error) {
	ret := _m.Called(ID)

	var r0 model.Cart
	if rf, ok := ret.Get(0).(func(int) model.Cart); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(model.Cart)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ID, item
func (_m *Service) Update(ID int, item model.CartItem) (model.CartItem, error) {
	ret := _m.Called(ID, item)

	var r0 model.CartItem
	if rf, ok := ret.Get(0).(func(int, model.CartItem) model.CartItem); ok {
		r0 = rf(ID, item)
	} else {
		r0 = ret.Get(0).(model.CartItem)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, model.CartItem) error); ok {
		r1 = rf(ID, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
